{"version":3,"sources":["components/Workspace/Toolbar.tsx","components/Workspace.tsx","hooks/useMemoAsync.ts","App.tsx","index.tsx"],"names":["ToolbarButtonPanel","styled","Stack","theme","spacing","Toolbar","ContainerProps","paging","useState","pageNumber","toString","rawPageNumber","setRawPageNumber","useEffect","direction","sx","bgcolor","color","undefined","alignItems","ButtonGroup","minWidth","px","Button","onClick","onPrevPage","TextField","onBlur","rawPageNumberNum","parseInt","isNaN","onSetPage","onChange","ev","currentTarget","value","maxWidth","p","textAlign","borderColor","palette","primary","main","borderRight","opacity","borderRadius","variant","onNextPage","totalPages","Workspace","setPageNumber","useDimensionsRef","updateOnResize","pagesContainerRef","workspaceDimensions","pdf","setPdf","f","deps","completed","result","setResult","isValid","a","error","useMemoAsync","Promise","all","length","numPages","Array","from","_","i","map","n","getPage","pages","view","reduce","maxPageHeight","maxPageWidth","width","height","Math","max","Number","MIN_SAFE_INTEGER","pdfMetadata","scale","useMemo","usableHeight","pageMarginPx","usableWidth","min","virtuosoRef","useRef","doSetPageNumber","useCallback","scrollTo","current","scrollToIndex","behavior","index","doNextPage","doPrevPage","justifyContent","Box","ref","id","flexGrow","file","onLoadSuccess","increaseViewportBy","bottom","top","itemContent","transform","display","onRenderSuccess","window","dispatchEvent","Event","rangeChanged","endIndex","startIndex","round","totalCount","createTheme","mode","App","ThemeProvider","GlobalStyles","styles","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.416cf791.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport {\n  ButtonGroup,\n  styled,\n  Stack,\n  TextField,\n  Button,\n  StackProps,\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { ChevronLeft, ChevronRight } from 'mdi-material-ui';\n\nexport type ToolbarProps = {\n  ContainerProps?: StackProps;\n  paging?: {\n    onNextPage: () => void;\n    onPrevPage: () => void;\n    onSetPage: (pageNumber: number) => void;\n    pageNumber: number;\n    totalPages: number;\n  };\n};\n\nconst ToolbarButtonPanel = styled(Stack)(\n  ({ theme }) => `\n  padding: ${theme.spacing(1)}\n`,\n);\n\nexport const Toolbar: React.FC<ToolbarProps> = ({ ContainerProps, paging }) => {\n  const [rawPageNumber, setRawPageNumber] = useState(\n    paging?.pageNumber.toString() ?? '',\n  );\n\n  useEffect(() => {\n    setRawPageNumber(paging?.pageNumber.toString() ?? '');\n  }, [paging?.pageNumber]);\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      {...ContainerProps}\n      sx={{\n        bgcolor: 'background.default',\n        color: 'text.primary',\n        ...ContainerProps?.sx,\n      }}\n    >\n      {paging !== undefined ? (\n        <ToolbarButtonPanel alignItems=\"center\" direction=\"row\" spacing={1}>\n          <Box>Page</Box>\n          <ButtonGroup\n            sx={{\n              '& .MuiButtonGroup-grouped': {\n                minWidth: 0,\n                px: 0,\n              },\n            }}\n          >\n            <Button onClick={() => paging.onPrevPage()}>\n              <ChevronLeft />\n            </Button>\n            <TextField\n              onBlur={() => {\n                const rawPageNumberNum = parseInt(rawPageNumber);\n\n                // TODO: validation with formik\n                if (!isNaN(rawPageNumberNum)) {\n                  paging.onSetPage(rawPageNumberNum);\n                }\n              }}\n              onChange={ev => setRawPageNumber(ev.currentTarget.value)}\n              sx={theme => ({\n                '& .MuiOutlinedInput-input.MuiInputBase-input': {\n                  maxWidth: '2rem',\n                  p: 1,\n                  textAlign: 'center',\n                },\n                '& .MuiOutlinedInput-notchedOutline': {\n                  borderColor: theme.palette.primary.main,\n                  borderRight: 'none',\n                  opacity: 0.5,\n                },\n                '& .MuiOutlinedInput-root': {\n                  borderRadius: 0,\n                },\n              })}\n              value={rawPageNumber}\n              variant=\"outlined\"\n            />\n            <Button onClick={() => paging.onNextPage()}>\n              <ChevronRight />\n            </Button>\n          </ButtonGroup>\n          <Box>of {paging.totalPages}</Box>\n        </ToolbarButtonPanel>\n      ) : undefined}\n    </Stack>\n  );\n};\n","import React, { Ref, useCallback, useMemo, useRef, useState } from 'react';\n\nimport { Box, Stack } from '@mui/material';\nimport { PDFDocumentProxy } from 'pdfjs-dist/types/display/api';\nimport { Document, Page } from 'react-pdf/dist/umd/entry.webpack';\nimport { Virtuoso, VirtuosoHandle } from 'react-virtuoso';\nimport { useDimensionsRef } from 'rooks';\n\nimport { useMemoAsync } from '../hooks/useMemoAsync';\nimport { Toolbar } from './Workspace/Toolbar';\n\nconst pageMarginPx = 25;\n\nexport const Workspace: React.FC = () => {\n  /** Toolbar */\n\n  const [pageNumber, setPageNumber] = useState(1);\n\n  /** React PDF */\n\n  const [pagesContainerRef, workspaceDimensions] = useDimensionsRef({\n    updateOnResize: true,\n  });\n\n  // Gets set after the PDF is downloaded and parsed by react-pdf (but before\n  // rendering the pages)\n  const [pdf, setPdf] = useState<PDFDocumentProxy>();\n\n  // Gets set after we've fetched all the widths/heights of the pages\n  const { value: pdfMetadata } = useMemoAsync(async () => {\n    if (pdf !== undefined) {\n      const pages = await Promise.all(\n        pageNumberArray(pdf.numPages).map(n => pdf.getPage(n)),\n      );\n      return pages\n        .map(p => p.view)\n        .reduce(\n          ({ maxPageHeight, maxPageWidth }, [, , width, height]) => ({\n            maxPageHeight: Math.max(height, maxPageHeight),\n            maxPageWidth: Math.max(width, maxPageWidth),\n          }),\n          {\n            maxPageHeight: Number.MIN_SAFE_INTEGER,\n            maxPageWidth: Number.MIN_SAFE_INTEGER,\n          },\n        );\n    }\n  }, [pdf]);\n\n  const scale = useMemo(() => {\n    if (pdfMetadata !== undefined && workspaceDimensions !== null) {\n      const usableHeight = workspaceDimensions.height - pageMarginPx * 2;\n      const usableWidth = workspaceDimensions.width - pageMarginPx * 2;\n      const s = Math.min(\n        usableHeight / pdfMetadata.maxPageHeight,\n        usableWidth / pdfMetadata.maxPageWidth,\n      );\n\n      return s;\n    }\n  }, [pdfMetadata, workspaceDimensions]);\n\n  /** Virtuoso */\n\n  const virtuosoRef = useRef<VirtuosoHandle>(null);\n\n  const doSetPageNumber = useCallback(\n    (\n      pageNumber: number,\n      { scrollTo }: { scrollTo?: 'auto' | 'smooth' } = {},\n    ) => {\n      const n = Math.max(1, Math.min(pdf?.numPages ?? 1, pageNumber));\n      setPageNumber(n);\n      if (scrollTo !== undefined) {\n        virtuosoRef.current?.scrollToIndex({\n          behavior: scrollTo,\n          index: n - 1,\n        });\n      }\n    },\n    [pdf, virtuosoRef],\n  );\n\n  const doNextPage = useCallback(\n    () => doSetPageNumber(pageNumber + 1, { scrollTo: 'smooth' }),\n    [doSetPageNumber, pageNumber],\n  );\n  const doPrevPage = useCallback(\n    () => doSetPageNumber(pageNumber - 1, { scrollTo: 'smooth' }),\n    [doSetPageNumber, pageNumber],\n  );\n\n  return (\n    <Stack sx={{ height: '100%', justifyContent: 'stretch', width: '100%' }}>\n      <Toolbar\n        paging={\n          pdf?.numPages !== undefined\n            ? {\n                onNextPage: doNextPage,\n                onPrevPage: doPrevPage,\n                onSetPage: n => doSetPageNumber(n, { scrollTo: 'auto' }),\n                pageNumber,\n                totalPages: pdf?.numPages,\n              }\n            : undefined\n        }\n      />\n      <Box\n        ref={pagesContainerRef as unknown as Ref<unknown>}\n        id=\"pages-container\"\n        sx={{\n          '& .react-pdf__Document': {\n            height: '100%',\n            width: '100%',\n          },\n          bgcolor: 'grey.800',\n          flexGrow: 1,\n        }}\n      >\n        <Document\n          file=\"/hirsimaa_christoffer_OCH_nycander_martin_K10036.pdf\"\n          onLoadSuccess={pdf => setPdf(pdf as unknown as PDFDocumentProxy)}\n        >\n          {pdf !== undefined && workspaceDimensions !== null ? (\n            <Virtuoso\n              ref={virtuosoRef}\n              increaseViewportBy={{\n                bottom: workspaceDimensions.height / 2,\n                top: workspaceDimensions.height / 2,\n              }}\n              itemContent={i => (\n                <Box\n                  sx={{\n                    '& .react-pdf__Page': {\n                      transform: `scale(${scale ?? 1})`,\n                    },\n                    alignItems: 'center',\n                    display: 'flex',\n                    height: `${workspaceDimensions.height}px`,\n                    justifyContent: 'center',\n                  }}\n                >\n                  <Page\n                    onRenderSuccess={() =>\n                      window.dispatchEvent(new Event('resize'))\n                    }\n                    pageNumber={i + 1}\n                  />\n                </Box>\n              )}\n              rangeChanged={({ endIndex, startIndex }) => {\n                if (endIndex - startIndex < 2) {\n                  if (startIndex > 0) {\n                    setPageNumber(pdf?.numPages ?? 1);\n                  } else {\n                    setPageNumber(1);\n                  }\n                } else {\n                  setPageNumber(\n                    startIndex + Math.round((endIndex - startIndex) / 2) + 1,\n                  );\n                }\n              }}\n              totalCount={pdf.numPages}\n            />\n          ) : undefined}\n        </Document>\n      </Box>\n    </Stack>\n  );\n};\n\nfunction pageNumberArray(length: number) {\n  return Array.from({ length }, (_, i) => i + 1);\n}\n","import { useEffect, useState } from 'react';\n\nexport type MemoAsync<V, E> = {\n  completed: boolean;\n  error?: E;\n  value?: V;\n};\n\nexport function useMemoAsync<V, E = Error | unknown>(\n  f: () => Promise<V>,\n  deps: unknown[],\n): MemoAsync<V, E> {\n  const [result, setResult] = useState<MemoAsync<V, E>>({ completed: false });\n\n  useEffect(() => {\n    let isValid = true;\n    void (async () => {\n      try {\n        const value = await f();\n        if (isValid) {\n          setResult({ completed: true, value });\n        }\n      } catch (e) {\n        if (isValid) {\n          setResult({ completed: true, error: e as E });\n        }\n      }\n    })();\n    return () => {\n      isValid = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return result;\n}\n","import React from 'react';\n\nimport { createTheme, GlobalStyles, ThemeProvider } from '@mui/material';\n\nimport { Workspace } from './components/Workspace';\n\nconst theme = createTheme({ palette: { mode: 'dark' } });\n\nexport const App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles\n        styles={{\n          'html, body, #root': {\n            height: '100%',\n            width: '100%',\n          },\n        }}\n      />\n      <Workspace />\n    </ThemeProvider>\n  );\n};\n","import React from 'react';\n\nimport { render } from 'react-dom';\n\nimport { App } from './App';\n\nimport './vendorSetup';\nimport './index.css';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}