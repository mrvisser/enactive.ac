{"version":3,"sources":["components/Workspace/Toolbar.tsx","components/Workspace.tsx","hooks/useResizeObserver.ts","hooks/useMemoAsync.ts","App.tsx","index.tsx"],"names":["ToolbarButtonPanel","styled","Stack","theme","spacing","Toolbar","ContainerProps","paging","useState","pageNumber","toString","rawPageNumber","setRawPageNumber","useEffect","direction","sx","bgcolor","color","undefined","alignItems","ButtonGroup","minWidth","px","Button","onClick","onPrevPage","TextField","onBlur","rawPageNumberNum","parseInt","isNaN","onSetPage","onChange","ev","currentTarget","value","maxWidth","p","textAlign","borderColor","palette","primary","main","borderRight","opacity","borderRadius","variant","onNextPage","totalPages","Workspace","setPageNumber","el","setEl","ref","useCallback","node","getBoundingClientRect","rect","setRect","observer","ResizeObserver","observe","disconnect","useResizeObserver","pagesContainerRef","workspaceDimensions","pdf","setPdf","f","deps","completed","result","setResult","isValid","a","error","useMemoAsync","Promise","all","length","numPages","Array","from","_","i","map","n","getPage","pdfPages","pageSizing","useMemo","margin","Math","min","width","height","maxHeight","max","view","usableHeight","usableWidth","scale","container","virtuosoRef","useRef","virtuosoScrollerRef","setVirtuosoScrollerRef","activePageRange","setActivePageRange","isScrollAnimating","setIsScrollAnimating","doSetPageNumber","scrollTo","current","scrollToIndex","behavior","index","doNextPage","doPrevPage","resolveScrolledPageNumber","scrollTop","page","offset","size","onScroll","addEventListener","removeEventListener","justifyContent","Box","id","flexGrow","file","onLoadSuccess","increaseViewportBy","bottom","top","isScrolling","itemContent","transform","display","onRenderSuccess","window","dispatchEvent","Event","itemsRendered","range","scrollerRef","totalCount","createTheme","mode","App","ThemeProvider","GlobalStyles","styles","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3d63adb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport {\n  ButtonGroup,\n  styled,\n  Stack,\n  TextField,\n  Button,\n  StackProps,\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { ChevronLeft, ChevronRight } from 'mdi-material-ui';\n\nexport type ToolbarProps = {\n  ContainerProps?: StackProps;\n  paging?: {\n    onNextPage: () => void;\n    onPrevPage: () => void;\n    onSetPage: (pageNumber: number) => void;\n    pageNumber: number;\n    totalPages: number;\n  };\n  zooming?: {\n    onZoomIn: () => void;\n    onZoomOut: () => void;\n    onFitPage: () => void;\n    onFitWidth: () => void;\n  };\n};\n\nconst ToolbarButtonPanel = styled(Stack)(\n  ({ theme }) => `\n  padding: ${theme.spacing(1)}\n`,\n);\n\nexport const Toolbar: React.FC<ToolbarProps> = ({ ContainerProps, paging }) => {\n  const [rawPageNumber, setRawPageNumber] = useState(\n    paging?.pageNumber.toString() ?? '',\n  );\n\n  useEffect(() => {\n    setRawPageNumber(paging?.pageNumber.toString() ?? '');\n  }, [paging?.pageNumber]);\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      {...ContainerProps}\n      sx={{\n        bgcolor: 'background.default',\n        color: 'text.primary',\n        ...ContainerProps?.sx,\n      }}\n    >\n      {paging !== undefined ? (\n        <ToolbarButtonPanel alignItems=\"center\" direction=\"row\" spacing={1}>\n          <Box>Page</Box>\n          <ButtonGroup\n            sx={{\n              '& .MuiButtonGroup-grouped': {\n                minWidth: 0,\n                px: 0,\n              },\n            }}\n          >\n            <Button onClick={() => paging.onPrevPage()}>\n              <ChevronLeft />\n            </Button>\n            <TextField\n              onBlur={() => {\n                const rawPageNumberNum = parseInt(rawPageNumber);\n                // TODO: validation with formik\n                if (!isNaN(rawPageNumberNum)) {\n                  paging.onSetPage(rawPageNumberNum);\n                }\n              }}\n              onChange={ev => setRawPageNumber(ev.currentTarget.value)}\n              sx={theme => ({\n                '& .MuiOutlinedInput-input.MuiInputBase-input': {\n                  maxWidth: '2rem',\n                  p: 1,\n                  textAlign: 'center',\n                },\n                '& .MuiOutlinedInput-notchedOutline': {\n                  borderColor: theme.palette.primary.main,\n                  borderRight: 'none',\n                  opacity: 0.5,\n                },\n                '& .MuiOutlinedInput-root': {\n                  borderRadius: 0,\n                },\n              })}\n              value={rawPageNumber}\n              variant=\"outlined\"\n            />\n            <Button onClick={() => paging.onNextPage()}>\n              <ChevronRight />\n            </Button>\n          </ButtonGroup>\n          <Box>of {paging.totalPages}</Box>\n        </ToolbarButtonPanel>\n      ) : undefined}\n    </Stack>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { Box, Stack } from '@mui/material';\nimport { PDFDocumentProxy } from 'pdfjs-dist/types/display/api';\nimport { Document, Page } from 'react-pdf/dist/umd/entry.webpack';\nimport { RecordItem, Virtuoso, VirtuosoHandle } from 'react-virtuoso';\n\nimport { useMemoAsync } from '../hooks/useMemoAsync';\nimport { useResizeObserver } from '../hooks/useResizeObserver';\nimport { Toolbar } from './Workspace/Toolbar';\n\nconst pageMarginPct = 0.05;\n\nexport const Workspace: React.FC = () => {\n  /** Toolbar */\n\n  const [pageNumber, setPageNumber] = useState(1);\n\n  /** React PDF */\n  const [pagesContainerRef, workspaceDimensions] = useResizeObserver();\n\n  // Gets set after the PDF is downloaded and parsed by react-pdf (but before\n  // rendering the pages)\n  const [pdf, setPdf] = useState<PDFDocumentProxy>();\n\n  // Gets set after we've fetched all the widths/heights of the pages\n  const { value: pdfPages } = useMemoAsync(async () => {\n    return pdf !== undefined\n      ? await Promise.all(\n          pageNumberArray(pdf.numPages).map(n => pdf.getPage(n)),\n        )\n      : undefined;\n  }, [pdf]);\n\n  const pageSizing = useMemo(() => {\n    if (pdfPages !== undefined && workspaceDimensions !== undefined) {\n      const margin = Math.min(\n        workspaceDimensions.width * pageMarginPct,\n        workspaceDimensions.height * pageMarginPct,\n      );\n      const maxHeight = Math.max(...pdfPages.map(p => p.view[3]));\n      const maxWidth = Math.max(...pdfPages.map(p => p.view[2]));\n      const usableHeight = workspaceDimensions.height - margin;\n      const usableWidth = workspaceDimensions.width - 2 * margin;\n      const scale = Math.min(usableHeight / maxHeight, usableWidth / maxWidth);\n      const result = {\n        container: pdfPages.map(p => ({\n          // The height in pixels of this page container, adjusted for scale and margin\n          height: p.view[3] * scale + margin,\n          // The width in pixels of this page container, adjusted for scale and margin\n          width: p.view[2] * scale + 2 * margin,\n        })),\n        scale,\n      };\n\n      return result;\n    }\n  }, [pdfPages, workspaceDimensions]);\n\n  /** Virtuoso */\n\n  const virtuosoRef = useRef<VirtuosoHandle>(null);\n  const [virtuosoScrollerRef, setVirtuosoScrollerRef] = useState<HTMLElement>();\n  const [activePageRange, setActivePageRange] = useState<\n    RecordItem<undefined>[] | undefined\n  >(undefined);\n\n  const [isScrollAnimating, setIsScrollAnimating] = useState(false);\n\n  const doSetPageNumber = useCallback(\n    (\n      pageNumber: number,\n      { scrollTo }: { scrollTo?: 'auto' | 'smooth' } = {},\n    ) => {\n      const n = Math.max(1, Math.min(pdf?.numPages ?? 1, pageNumber));\n      setPageNumber(n);\n      if (scrollTo !== undefined) {\n        if (scrollTo === 'smooth') {\n          setIsScrollAnimating(true);\n        }\n        virtuosoRef.current?.scrollToIndex({\n          behavior: scrollTo,\n          index: n - 1,\n        });\n      }\n    },\n    [pdf, virtuosoRef],\n  );\n  const doNextPage = useCallback(\n    () => doSetPageNumber(pageNumber + 1, { scrollTo: 'smooth' }),\n    [doSetPageNumber, pageNumber],\n  );\n  const doPrevPage = useCallback(\n    () => doSetPageNumber(pageNumber - 1, { scrollTo: 'smooth' }),\n    [doSetPageNumber, pageNumber],\n  );\n\n  const resolveScrolledPageNumber = useCallback(\n    (scrollTop: number) => {\n      if (activePageRange !== undefined) {\n        for (const page of activePageRange) {\n          if (scrollTop >= page.offset && scrollTop < page.offset + page.size) {\n            setPageNumber(page.index + 1);\n          }\n        }\n      }\n    },\n    [activePageRange],\n  );\n  useEffect(() => {\n    if (virtuosoScrollerRef !== undefined && !isScrollAnimating) {\n      resolveScrolledPageNumber(virtuosoScrollerRef.scrollTop);\n      function onScroll() {\n        if (virtuosoScrollerRef !== undefined && !isScrollAnimating) {\n          resolveScrolledPageNumber(virtuosoScrollerRef.scrollTop);\n        }\n      }\n      virtuosoScrollerRef.addEventListener('scroll', onScroll);\n      return () => virtuosoScrollerRef.removeEventListener('scroll', onScroll);\n    }\n  }, [isScrollAnimating, resolveScrolledPageNumber, virtuosoScrollerRef]);\n\n  return (\n    <Stack sx={{ height: '100%', justifyContent: 'stretch', width: '100%' }}>\n      <Toolbar\n        paging={\n          pdf?.numPages !== undefined\n            ? {\n                onNextPage: doNextPage,\n                onPrevPage: doPrevPage,\n                onSetPage: n => doSetPageNumber(n, { scrollTo: 'auto' }),\n                pageNumber,\n                totalPages: pdf?.numPages,\n              }\n            : undefined\n        }\n      />\n      <Box\n        ref={pagesContainerRef}\n        id=\"pages-container\"\n        sx={{\n          '& .react-pdf__Document': {\n            height: '100%',\n            width: '100%',\n          },\n          bgcolor: 'grey.800',\n          flexGrow: 1,\n        }}\n      >\n        <Document\n          file=\"/embdr/pages.pdf\"\n          onLoadSuccess={pdf => setPdf(pdf as unknown as PDFDocumentProxy)}\n        >\n          {pdf !== undefined &&\n          workspaceDimensions !== undefined &&\n          pageSizing !== undefined ? (\n            <Virtuoso\n              ref={virtuosoRef}\n              increaseViewportBy={{\n                bottom: workspaceDimensions.height / 2,\n                top: workspaceDimensions.height / 2,\n              }}\n              isScrolling={isScrolling => {\n                if (!isScrolling) {\n                  setIsScrollAnimating(false);\n                }\n              }}\n              itemContent={i => (\n                <Box\n                  sx={{\n                    '& .react-pdf__Page': {\n                      transform: `scale(${pageSizing.scale})`,\n                    },\n                    alignItems: 'center',\n                    display: 'flex',\n                    height: `${pageSizing.container[i].height}px`,\n                    justifyContent: 'center',\n                  }}\n                >\n                  <Page\n                    onRenderSuccess={() =>\n                      window.dispatchEvent(new Event('resize'))\n                    }\n                    pageNumber={i + 1}\n                  />\n                </Box>\n              )}\n              itemsRendered={range =>\n                setActivePageRange(range as unknown as RecordItem<undefined>[])\n              }\n              scrollerRef={ref =>\n                setVirtuosoScrollerRef(\n                  (ref ?? undefined) as unknown as HTMLElement | undefined,\n                )\n              }\n              totalCount={pdf.numPages}\n            />\n          ) : undefined}\n        </Document>\n      </Box>\n    </Stack>\n  );\n};\n\nfunction pageNumberArray(length: number) {\n  return Array.from({ length }, (_, i) => i + 1);\n}\n","import { useCallback, useEffect, useState } from 'react';\n\nexport function useResizeObserver(): [\n  (node: Element | null | undefined) => void,\n  DOMRect | undefined,\n] {\n  const [el, setEl] = useState<Element>();\n  const ref = useCallback(\n    (node: Element | null | undefined) =>\n      node === null ? setEl(undefined) : setEl(node),\n    [],\n  );\n\n  const [rect, setRect] = useState(el?.getBoundingClientRect());\n  useEffect(() => {\n    if (el !== null && el !== undefined) {\n      const observer = new ResizeObserver(() =>\n        setRect(el.getBoundingClientRect()),\n      );\n      observer.observe(el);\n      return () => observer.disconnect();\n    }\n  }, [el]);\n\n  return [ref, rect];\n}\n","import { useEffect, useState } from 'react';\n\nexport type MemoAsync<V, E> = {\n  completed: boolean;\n  error?: E;\n  value?: V;\n};\n\nexport function useMemoAsync<V, E = Error | unknown>(\n  f: () => Promise<V>,\n  deps: unknown[],\n): MemoAsync<V, E> {\n  const [result, setResult] = useState<MemoAsync<V, E>>({ completed: false });\n\n  useEffect(() => {\n    let isValid = true;\n    void (async () => {\n      try {\n        const value = await f();\n        if (isValid) {\n          setResult({ completed: true, value });\n        }\n      } catch (e) {\n        if (isValid) {\n          setResult({ completed: true, error: e as E });\n        }\n      }\n    })();\n    return () => {\n      isValid = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return result;\n}\n","import React from 'react';\n\nimport { createTheme, GlobalStyles, ThemeProvider } from '@mui/material';\n\nimport { Workspace } from './components/Workspace';\n\nconst theme = createTheme({ palette: { mode: 'dark' } });\n\nexport const App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles\n        styles={{\n          'html, body, #root': {\n            height: '100%',\n            width: '100%',\n          },\n        }}\n      />\n      <Workspace />\n    </ThemeProvider>\n  );\n};\n","import React from 'react';\n\nimport { render } from 'react-dom';\n\nimport { App } from './App';\n\nimport './vendorSetup';\nimport './index.css';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}